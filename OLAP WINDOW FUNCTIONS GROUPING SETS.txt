WINDOW FUNCTIONS, GROUPING SETS, CUBES, ROLLUPS


GROUPING SETS



---- a group by statement
select
department,
joblevel,
sum(salary) as total_salary
from
employees
group by department, joblevel;

-------without group by sets we would do the following
select
department,
joblevel,
sum(salary) as total_salary
from
employees
group by department, joblevel
UNION ALL  --- stacking two tables
select
department,
null,
sum(salary) as total_salary
from
employees
group by department
UNION ALL
select
null,
joblevel,
sum(salary) as total_salary
from
employees
group by joblevel
UNION ALL
select
null,
null,
sum(salary) as total_salary
from
employees

IN order to produce the above results the employees table will be read four times which will impact performance.
It is possible to obtain the same results from one table read which will greatly improve performance.
These functions are built into SQL Server and are called GROUPING SETS, CUBES and ROLLUPS.

Using GROUPING SETS we would write the statement as:
select
department,
joblevel,
sum(salary) as total_salary
from
employees
Group BY
GROUPING SETS
(
   (department, joblevel), ----sum of salary by department and job level
   (department),  ----- sum of salary by department
   (joblevel), ----- sum of salary by job level
   () -----sum of salary over all
)
ORDER BY Grouping(department),Grouping(joblevel),joblevel


ROLLUP Function
ROLLUP is used to do aggregarion operations on multiple levels in a hierarchy. 
Rollup also provides a grand total.

select
department,
joblevel,
sum(salary) as total_salary
from
employees
GROUP BY ROLLUP(department) ----will provide a sum of salary by department and a grand total



select
department,
joblevel,
sum(salary) as total_salary
from
employees
GROUP BY department WITH ROLLUP --- same results as above

select
department,
joblevel,
sum(salary) as total_salary
from
employees
GROUP BY ROLLUP(department,joblevel) ---will provide summary of salary by department and job level, by department and a grand total.
Note that we will not get sum of salary by job level only, for this we need to use the CUBE function.

CUBE
The Cube() function generates all possible combinations of columns specified in the GROUP BY CUBE() clause.
select
department,
joblevel,
sum(salary) as total_salary
from
employees
Group By Cube(department,joblevel)
----
----Group by department,joblevel with Cube -- same cube function as above

CUBE vs. ROLLUP
Cube generates a result set that contains aggregates for all cominations of values in the selected columns whereas Rollup generates a result set that shows aggregates for a hierarchy of values in the selected columns.
The order of columns determines the results when using Rollup.

Cube
Continent, Country, City 
Continent, Country
Continent, City
Country, City
Continent
Country
City
Grand Total

Rollup
Continent, Country, City
Continent, Country
Continent
Grand Total


THE GROUPING FUNCTION IN SQL SERVER
The Grouping(Column) returns a boolean value of 0 or 1 and indicates whether a column in a GROUP BY list is aggregated or not. 
Grouping returns 1 if it is aggregated and 0 if it isn't aggregated in the result set.

 select
 continent,
 country,
 city,
 sum(sales) as totalsales,
 grouping(continent) as gp_continent,
 grouping(country) as gp_country,
 grouping(city) as gp_city
 from
 tbl_sales
 group by rollup(continent,country,city)

If data is aggregated across the grouping column then it will return a 1, if not a 0.
If we see gp_continent = 0, gp_country = 0 and gp_city = 1 then we are seeing the sum of sales aggregated by city.


GROUPING ID FUNCTION
What is the GROUPING_ID function?
Grouping can only be used on one column and will return only a 0 or 1
Grouping_ID returns the level of grouping on a group of columns
GROUPING_ID(colA,colB,colC) = Grouping(colA) + Grouping(colB) + Grouping(colC) and can return values 0 to 7 indicating the level of grouping.
Grouping_ID takes into account the hierarchy of grouping where 000 = 0, 001 = 1, 010 = 2, 011=3, 100=4,101=5, 110 = 6 and 111 = 7.
Grouping_ID concatenates all the Grouping() functions, performs the binary to decimal conversion and returns the equivalent integer.
In this way GROUPING_ID supplies the level of grouping and allows us to filter on these levels of grouping. 

000 no grouping = 0
001 grouping on city only = 1
010 grouping on country only = 2
011 grouping on country and city only = 3
100 grouping on continent only = 4
101 grouping on continent and city = 5
110 grouping on continent, country only = 6
111 grouping on continent, country and city = 7








