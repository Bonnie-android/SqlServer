WINDOW FUNCTIONS, GROUPING SETS, CUBES, ROLLUPS


GROUPING SETS



---- a group by statement
select
department,
joblevel,
sum(salary) as total_salary
from
employees
group by department, joblevel;

-------without group by sets we would do the following
select
department,
joblevel,
sum(salary) as total_salary
from
employees
group by department, joblevel
UNION ALL  --- stacking two tables
select
department,
null,
sum(salary) as total_salary
from
employees
group by department
UNION ALL
select
null,
joblevel,
sum(salary) as total_salary
from
employees
group by joblevel
UNION ALL
select
null,
null,
sum(salary) as total_salary
from
employees

IN order to produce the above results the employees table will be read four times which will impact performance.
It is possible to obtain the same results from one table read which will greatly improve performance.
These functions are built into SQL Server and are called GROUPING SETS, CUBES and ROLLUPS.

Using GROUPING SETS we would write the statement as:
select
department,
joblevel,
sum(salary) as total_salary
from
employees
Group BY
GROUPING SETS
(
   (department, joblevel), ----sum of salary by department and job level
   (department),  ----- sum of salary by department
   (joblevel), ----- sum of salary by job level
   () -----sum of salary over all
)
ORDER BY Grouping(department),Grouping(joblevel),joblevel


ROLLUP Function
ROLLUP is used to do aggregarion operations on multiple levels in a hierarchy. 
Rollup also provides a grand total.

select
department,
joblevel,
sum(salary) as total_salary
from
employees
GROUP BY ROLLUP(department) ----will provide a sum of salary by department and a grand total



select
department,
joblevel,
sum(salary) as total_salary
from
employees
GROUP BY department WITH ROLLUP --- same results as above

select
department,
joblevel,
sum(salary) as total_salary
from
employees
GROUP BY ROLLUP(department,joblevel) ---will provide summary of salary by department and job level, by department and a grand total.
Note that we will not get sum of salary by job level only, for this we need to use the CUBE function.

CUBE
The Cube() function generates all possible combinations of columns specified in the GROUP BY CUBE() clause.
select
department,
joblevel,
sum(salary) as total_salary
from
employees
Group By Cube(department,joblevel)
----
----Group by department,joblevel with Cube -- same cube function as above

CUBE vs. ROLLUP
Cube generates a result set that contains aggregates for all cominations of values in the selected columns whereas Rollup generates a result set that shows aggregates for a hierarchy of values in the selected columns.
The order of columns determines the results when using Rollup.

Cube
Continent, Country, City 
Continent, Country
Continent, City
Country, City
Continent
Country
City
Grand Total

Rollup
Continent, Country, City
Continent, Country
Continent
Grand Total


THE GROUPING FUNCTION IN SQL SERVER
The Grouping(Column) returns a boolean value of 0 or 1 and indicates whether a column in a GROUP BY list is aggregated or not. 
Grouping returns 1 if it is aggregated and 0 if it isn't aggregated in the result set.

 select
 continent,
 country,
 city,
 sum(sales) as totalsales,
 grouping(continent) as gp_continent,
 grouping(country) as gp_country,
 grouping(city) as gp_city
 from
 tbl_sales
 group by rollup(continent,country,city)

If data is aggregated across the grouping column then it will return a 1, if not a 0.
If we see gp_continent = 0, gp_country = 0 and gp_city = 1 then we are seeing the sum of sales aggregated by city.


GROUPING ID FUNCTION
What is the GROUPING_ID function?
Grouping can only be used on one column and will return only a 0 or 1
Grouping_ID returns the level of grouping on a group of columns
GROUPING_ID(colA,colB,colC) = Grouping(colA) + Grouping(colB) + Grouping(colC) and can return values 0 to 7 indicating the level of grouping.
Grouping_ID takes into account the hierarchy of grouping where 000 = 0, 001 = 1, 010 = 2, 011=3, 100=4,101=5, 110 = 6 and 111 = 7.
Grouping_ID concatenates all the Grouping() functions, performs the binary to decimal conversion and returns the equivalent integer.
In this way GROUPING_ID supplies the level of grouping and allows us to filter on these levels of grouping. 

000 no grouping = 0
001 grouping on city only = 1
010 grouping on country only = 2
011 grouping on country and city only = 3
100 grouping on continent only = 4
101 grouping on continent and city = 5
110 grouping on continent, country only = 6 
111 grouping on continent, country and city = 7
TO Filter on Grouping_ID level we would say 'HAVING GROUPING_ID(Continent,Country,City) = 3' for example.

 select
 continent,
 country,
 city,
 sum(sales) as totalsales,
 grouping(continent) as gp_continent,
 grouping(country) as gp_country,
 grouping(city) as gp_city,
 GROUPING_ID(continent,country,city)
 from
 tbl_sales
 group by rollup(continent,country,city)
 having  GROUPING_ID(continent,country,city) = 3

------------------------------------------------------------------------
OVER CLAUSE 

The OVER clause when used with PARTITION BY breaks up the data into partitions or windows. The specified function such as SUM operates on each window of data.
function() OVER (PARTITION BY Col1, Col2,...) where Col1 and Col2 are the columns that we want to perform the function on.
What functions are available? COUNT(), AVG(), SUM(), MIN(), MAX(), ROW_NUMBER(), RANK(), DENSE_RANK().

COUNT(DEPARTMENT_ID) OVER (PARTITION BY DEPARTMENT_ID) will partition the data by DEPARTMENT_ID and then take a COUNT() of records in each partition.


  /** simple count, sum, min, max and avg of salaries by department **/
  select
  count(*) as Employee_Count,
  sum(salary) as Sum_Salary,
  min(salary) as Min_Salary,
  max(salary) as Max_Salary,
  DeptID
  from
  [dbo].[Employees]
  group by DeptID;

What if you want this attached to each detail record? You want to include each record in the table plus these statistics in a report?

This will provide detail records of each employee along with the department statistics in each record.

 Select
  ID,
  Name,
  Title,
  Salary,
  DeptID,
  COUNT(DeptID) OVER (Partition by DeptID) as Dept_Count,
  SUM(Salary) OVER (Partition by DeptID) as Tot_Sal_By_Dept,
  MIN(Salary) OVER(Partition by DeptID) as Min_Sal_By_Dept,
  MAX(Salary) OVER(Partition by DeptID) as Max_Sal_By_Dept
  from 
  [dbo].[Employees]
----------------------------------------------------------------------
The ROW_NUMBER function
Returns the sequential number of a row starting at 1
ORDER BY clause is required
PARTITION BY clause is optional
If PARTITION BY is used then ROW_NUMBER is reset to 1 every time a partition changes

Syntax: ROW_NUMBER() OVER (ORDER BY Col1,Col2)
The ROW_NUMBER() function does not take any arguements

  Select
  Name,
  Title,
  DeptID,
  ROW_NUMBER() OVER(ORDER BY DeptID) as ROW_NUM
  from
  [dbo].[Employees]

Provides simple ROW_NUM output numbering 1 to #employees in DeptID order. There is no break-processing on DeptID.

To begin ROW_NUMBER at 1 for each category use the PARTITION_BY clause. First PARTITION the data and then ORDER the data.
  Select
  Name,
  Title,
  DeptID,
  ROW_NUMBER() OVER(PARTITION BY DeptID ORDER BY DeptID) as ROW_NUM
  from
  [dbo].[Employees]

ROW_NUMBER will begin at 1 everytime the DeptID changes.


RANK() AND DENSE_RANK() FUNCTIONS
Returns a rank starting at 1 based on the ordering of rows imposed by the ORDER BY clause
The ORDER BY clause is required
The PARTITION_BY clause is optional.
When the data is partitioned the rank is reset to 1 when the partition changes.
The RANK function will skip numbers if there is a tie but DENSE_RANK will not.
In the case where the first records in a table have equal rank, RANK() returns 1,1,3,4,5 but the function DENSE_RANK() will return 1,1,2,3,4.

The basic syntax is
RANK() OVER (ORDER BY Col1,Col2,...)
DENSE_RANK() OVER (ORDER BY Col1,Col2,...) --- DOES NOT LEAVE GAPS IN THE RANKINGS


Here I want a list of top ranking salaries. The statement may return more than one row:
  /* USING CTE */
  WITH [RESULT] AS
  (Select
     SALARY,
     RANK() OVER (ORDER BY SALARY DESC) AS SAL_RANK
     FROM
     [ProductDB].[dbo].[Employees]
	) SELECT 
   SALARY
   FROM
   [RESULT] 
   WHERE SAL_RANK = 1
If there are three records with the same ranking as 1 then the next highest RANK will be 4. 

Here I want salaries in top 3 ranking category so I will have to use DENSE_RANK
 WITH [RESULT] AS
  (Select
     SALARY,
     DENSE_RANK() OVER (ORDER BY SALARY DESC) AS SAL_RANK
     FROM
     [ProductDB].[dbo].[Employees]
	) SELECT 
   SALARY
   FROM
   [RESULT] 
   WHERE SAL_RANK <= 3
 
Here I want the top ranking salaries by department - so I will partition the data set by department and then take a dense rank.
First partition the data set, then order within each partition and then take the dense rank

  WITH [RESULT] AS
  (Select
     DeptID,
     SALARY,
     DENSE_RANK() OVER (PARTITION BY DeptID ORDER BY SALARY DESC) AS SAL_RANK
     FROM
     [ProductDB].[dbo].[Employees]
	) SELECT 
   DeptID,
   Salary,
   Sal_Rank
   FROM
   [RESULT] 
   WHERE SAL_RANK <= 3

GROUPING DATA AND RANKING IT USING NTILE FUNCTION

Order by clause is required.
Partition By clause is optional.
NTILE distributes the rows into a specified number of groups
The groups may not have the same number of members depending on how they are divided up.
Larger groups come before smaller groups.
NTILE(2) of 10 rows will divide them equally into two groups with five records in each group.
NTILE(3) of 10 rows will divide them into three groups with the first group having four records and the rest having three records.

Syntax:
NTILE(Number_of_Groups) OVER(ORDER BY Col1,Col2,...)

   SELECT 
   ID,
   Name,
   Title,
   DeptID,
   Salary,
   NTILE(3) OVER (ORDER BY Salary) as NTILE
   FROM
   [ProductDB].[dbo].[Employees]

Will divide the Salaries into three groups with an NTILE value of 1, 2 or 3.
1 will be the lower third of salaries, 3 will be the top third of salaries.

I can further divide the data by Department and look at the NTILE of salaries within each department.
   SELECT 
   ID,
   Name,
   Title,
   DeptID,
   Salary,
   NTILE(3) OVER (PARTITION BY DeptID ORDER BY Salary) as [NTILE]
   FROM
   [ProductDB].[dbo].[Employees]

which will divide up the salaries into three groups within each department.
------------------------------------------------------------
LEAD AND LAG FUNCTIONS

The LEAD function is used to access subsequent rows along with the current row. 
The LAG function is used to access previous rows along with the current row.
ORDER BY clause is required
PARTITION BY clause is optional
LEAD(Column_Name,Offset,Default_value) OVER (ORDER BY Col1, Col2, ...)
LAG(Column_Name,Offset,Default_value) OVER (ORDER BY Col1,Col2,...)
The Default_Value will use used in place of NULLs. 
The Offset is 1 by default meaning that the functions will lead or lag by 1 row unless otherwise specified.

   SELECT
   ID,
   Name,
   Title,
   DeptID,
   Salary,
   LEAD(Salary,3,-1) OVER (ORDER BY SALARY) AS LEAD_BY_3,
   LAG(Salary,3,-1) OVER (ORDER BY SALARY) AS LAG_BY_3
   FROM
   [ProductDB].[dbo].[Employees]

This will give me a column for LEAD and LAG.
They are set to lead or lag by 3 records and will insert -1 if the field is NULL.





















