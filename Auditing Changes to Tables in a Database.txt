Auditing Changes to Tables in a Database

Auditing changes to tables in a database can be done using a DDL trigger.
The EVENTDATA() function returns the event object in XML format.
The event object contains the event type for example CREATE_TABLE, the post time which is a timestamp of the event the server name, the login name, the database name, the object name that the event occured on and the T-SQL command issuing the event.
This can be evaluated and loaded into an audit table to keep track of events occuring on the server or in a database.
This allows us to keep track of all table changes that are happening across all databases in a SQL Server instance.
We can capture this information using the following trigger
CREATE TRIGGER tr_Audit
ON ALL SERVER
FOR CREATE_TABLE, ALTER_TABLE, DROP_TABLE
AS
BEGIN
   Select EventData()
END

This will return an XML file similar to the following for a DROP_TABLE EVENT
<EVENT_INSTANCE>
  <EventType>DROP_TABLE</EventType>
  <PostTime>2018-01-02T11:06:16.347</PostTime>
  <SPID>52</SPID>
  <ServerName>LAPTOP-QKVFQ59K\SQLEXPRESS</ServerName>
  <LoginName>LAPTOP-QKVFQ59K\bonnie</LoginName>
  <UserName>dbo</UserName>
  <DatabaseName>ProductDB</DatabaseName>
  <SchemaName>dbo</SchemaName>
  <ObjectName>TEST_EVENT</ObjectName>
  <ObjectType>TABLE</ObjectType>
  <TSQLCommand>
    <SetOptions ANSI_NULLS="ON" ANSI_NULL_DEFAULT="ON" ANSI_PADDING="ON" QUOTED_IDENTIFIER="ON" ENCRYPTED="FALSE" />
    <CommandText>DROP TABLE TEST_EVENT</CommandText>
  </TSQLCommand>
</EVENT_INSTANCE>

This event instance can be loaded into an Audit table using the trigger.
Example Audit Table 
create table tblAuditChanges
(
   DatabaseName varchar(250),
   TableName varchar(250),
   EventType varchar(250),
   LoginName varchar(250),
   SQLCommand varchar(2500),
   AuditDateTime datetime
);

How is the data extracted from the XML file and loaded into the Audit table?
ALTER TRIGGER tr_Audit
ON ALL SERVER
FOR CREATE_TABLE, ALTER_TABLE, DROP_TABLE
AS
BEGIN
   DECLARE @EventData XML
   SELECT @EventData = EVENTDATA()
   INSERT INTO [ProductDB].[dbo].[tblAuditChanges]
   (DatabaseName,TableName,EventType,LoginName,SQLCommand,AuditDateTime)
   VALUES
   (@EventData.value('(/EVENT_INSTANCE/DatabaseName)[1]','varchar(250)'),
    @EventData.value('(/EVENT_INSTANCE/ObjectName)[1]'  ,'varchar(250)'),
	@EventData.value('(/EVENT_INSTANCE/EventType)[1]'   ,'varchar(250)'),
	@EventData.value('(/EVENT_INSTANCE/LoginName)[1]'   ,'varchar(250)'),
	@EventData.value('(/EVENT_INSTANCE/TSQLCommand)[1]' ,'varchar(2500)'),
	GetDate()
	)  
END


LOGON TRIGGERS 
Logon triggers can be used to track logins, restrict logons to the server, and limit the number of sessions for a specific login.
Logon triggers fire in response to a LOGON event.
Logon triggers fire after the authentication phase of logging in finishes and before the user session is established.
The view sys.dm_exec_sessions contains information about current active login sessions such as session_id, login_time, nt_user_name, status etc.
This information can be used to track and limit the number of current sessions a user has.
